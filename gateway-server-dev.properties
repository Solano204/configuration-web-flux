
server.port=8080
eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/


# Gateway Route Configuration
spring.cloud.gateway.routes[0].id=players
spring.cloud.gateway.routes[0].uri=lb://PLAYERS-APP
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/players/**

# Gateway Route Configuration
spring.cloud.gateway.routes[1].id=inventory
spring.cloud.gateway.routes[1].uri=lb://inventory-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/inventory/**

management.endpoints.web.exposure.include=gateway
management.endpoint.gateway.enabled=true

spring.cloud.gateway.routes[2].id=keycloak-app
spring.cloud.gateway.routes[2].uri=lb://keycloak-app
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/keycloak/**

spring.cloud.gateway.routes[3].id=breaker
spring.cloud.gateway.routes[3].uri=lb://breaker
spring.cloud.gateway.routes[3].predicates[0]=Path=/api/breaker/**




# Keycloak Config
# Here I specify the the issuer of the token (THE NAME OF THE REALM ENVIOROMENT)
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8181/realms/docker-real



# ensure that the token is intended for your specific API or client. When Spring Security checks the token, it will validate that the aud claim in the token matches spring-client-api-rest. If it does not, the token is considered invalid.
jwt.auth.converter.resource-id=Docker-Gym




#This property specifies which claim in the JWT token should be used as the principal (username of a client created this have (this user has realm_roles -: client_roles)) in the Spring Security context, This extracted value will be used as the authenticated principal in your application.  
jwt.auth.converter.principle-attribute=preferred_username
