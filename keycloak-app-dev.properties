spring.application.name=keycloak-app
# Keycloak Config
# Here I specify the the issuer of the token (THE NAME OF THE REALM ENVIOROMENT)
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak/realms/docker-real

# Here I specify the url where I can retriver the jwk(that contains the public key, to valdate the signature)
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://keycloak/realms/docker-real/protocol/openid-connect/certs


# ensure that the token is intended for your specific API or client. When Spring Security checks the token, it will validate that the aud claim in the token matches spring-client-api-rest. If it does not, the token is considered invalid.
jwt.auth.converter.resource-id=Docker-Gym

#This property specifies which claim in the JWT token should be used as the principal (username of a client created this have (this user has realm_roles -: client_roles)) in the Spring Security context, This extracted value will be used as the authenticated principal in your application.  
jwt.auth.converter.principle-attribute=preferred_username

logging.level.org.keycloak = DEBUG

server.port=8000


eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/

eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}


